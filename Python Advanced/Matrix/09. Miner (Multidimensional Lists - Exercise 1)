from collections import deque


def get_next_position(com, row, col):
    if com == 'up':
        r, c = row - 1, col
        if r < 0:
            r = row
    elif com == 'down':
        r, c = row + 1, col
        if r == n:
            r = row
    elif com == 'left':
        r, c = row, col - 1
        if c < 0:
            c = col
    elif com == 'right':
        r, c = row, col + 1
        if c == n:
            c = col
    return r, c


n = int(input())
matrix = []
m_row, m_col = 0, 0
coal = 0
exit = False
commands = deque([el for el in input().split()])


for i in range(n):
    matrix.append([el for el in input().split()])
    for j in range(n):
        if matrix[i][j] == 's':
            m_row, m_col = i, j
        elif matrix[i][j] == 'c':
            coal += 1

while commands and not exit:
    command = commands.popleft()
    next_row, next_col = get_next_position(command, m_row, m_col)
    if next_row == m_row and next_col == m_col:
        continue
    elif matrix[next_row][next_col] == 'c':
        coal -= 1
        matrix[m_row][m_col] = '*'
        matrix[next_row][next_col] = 's'
        m_row, m_col = next_row, next_col
    elif matrix[next_row][next_col] == 'e':
        print(f"Game over! ({next_row}, {next_col})")
        exit = True
        break
    elif matrix[next_row][next_col] == '*':
        matrix[m_row][m_col] = '*'
        matrix[next_row][next_col] = 's'
        m_row, m_col = next_row, next_col

if not commands and not exit and coal > 0:
    print(f"{coal} pieces of coal left. ({m_row}, {m_col})")
elif coal == 0:
    print(f"You collected all coal! ({m_row}, {m_col})")
